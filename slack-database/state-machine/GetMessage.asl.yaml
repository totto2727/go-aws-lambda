Comment: get messages and save to dynamo and send to SQS
StartAt: GetTaskFromSqs
States:
    GetTaskFromSqs:
        Type: Pass
        InputPath: $
        ResultPath: $.task
        Next: ExecuteApiChoise
    ExecuteApiChoise:
        Type: Choice
        InputPath: $
        Choices:
            -
                Variable: $.task.api
                StringEquals: twitter-list
                Next: GetTwitterList
        Default: DefaultState
    DefaultState:
        Type: Fail
        Cause: No Matches!
    GetTwitterList:
        Type: Task
        Resource: '${GetTwitterListTweetArn}'
        InputPath: $.task
        ResultPath: $.messages
        Next: ExecuteIsEmptyChoice
    ExecuteIsEmptyChoice:
        Type: Choice
        InputPath: $
        Default: ExecuteMessageMap
        Choices:
            -
                Variable: $.messages.message_count
                NumericEquals: 0
                Next: EmptySuceed
    EmptySuceed:
        Type: Succeed
    ExecuteMessageMap:
        Type: Map
        Next: SaveToChannelDynamoDb
        InputPath: $
        ItemsPath: $.messages.data
        Parameters:
            channel.$: $.task.channel
            api.$: $.task.api
            message.$: $$.Map.Item.Value
        ResultPath: null
        MaxConcurrency: 0
        Iterator:
            StartAt: SaveMessageToDynamoDb
            States:
                SaveMessageToDynamoDb:
                    Type: Task
                    Resource: 'arn:aws:states:::dynamodb:putItem'
                    Next: PublishSendMessageTaskSnsTopic
                    ResultPath: null
                    Parameters:
                        TableName: '${MessageDynamoDbTable}'
                        Item:
                            channel:
                                S.$: $.channel
                            id:
                                S.$: $.message.id
                            api:
                                S.$: $.api
                            user_name:
                                S.$: $.message.user_name
                            author_id:
                                S.$: $.message.author_id
                            created_at:
                                S.$: $.message.created_at
                            url:
                                S.$: $.message.url
                PublishSendMessageTaskSnsTopic:
                    Type: Task
                    Resource: 'arn:aws:states:::sns:publish'
                    Parameters:
                        TopicArn: '${SendMessageTaskSnsTopicArn}'
                        Message.$: $.message.url
                        MessageAttributes:
                            channel:
                                DataType: String
                                StringValue.$: $.channel
                    End: true
    SaveToChannelDynamoDb:
        Type: Task
        Resource: 'arn:aws:states:::dynamodb:updateItem'
        End: true
        InputPath: $
        Parameters:
            TableName: '${ChannelDynamoDbTable}'
            Key:
                id:
                    S.$: $.task.channel
            UpdateExpression: 'SET updated_at = :updated_at'
            ExpressionAttributeValues:
                ':updated_at':
                    S.$: $.messages.updated_at
